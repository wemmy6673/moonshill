"""

Revision ID: 58960d5fabd8
Revises: ae2905a93566
Create Date: 2025-05-14 09:27:43.843463

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '58960d5fabd8'
down_revision: Union[str, None] = 'ae2905a93566'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('campaign_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('campaign_id', sa.Integer(), nullable=False),
    sa.Column('content_filtering', sa.Boolean(), nullable=False),
    sa.Column('meme_generation', sa.Boolean(), nullable=False),
    sa.Column('sentiment_analysis', sa.Boolean(), nullable=False),
    sa.Column('plagiarism_check', sa.Boolean(), nullable=False),
    sa.Column('content_approval_required', sa.Boolean(), nullable=False),
    sa.Column('max_daily_posts', sa.Integer(), nullable=False),
    sa.Column('min_time_between_posts', sa.Integer(), nullable=False),
    sa.Column('language_style', sa.String(), nullable=False),
    sa.Column('emoji_usage', sa.String(), nullable=False),
    sa.Column('hashtag_usage', sa.String(), nullable=False),
    sa.Column('max_hashtags_per_post', sa.Integer(), nullable=False),
    sa.Column('platform_settings', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('cross_posting', sa.Boolean(), nullable=False),
    sa.Column('platform_rotation', sa.Boolean(), nullable=False),
    sa.Column('auto_reply', sa.Boolean(), nullable=False),
    sa.Column('reply_to_mentions', sa.Boolean(), nullable=False),
    sa.Column('engage_with_comments', sa.Boolean(), nullable=False),
    sa.Column('max_daily_replies', sa.Integer(), nullable=False),
    sa.Column('engagement_hours', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('community_guidelines', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('blocked_users', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('blocked_keywords', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('auto_moderation', sa.Boolean(), nullable=False),
    sa.Column('spam_detection', sa.Boolean(), nullable=False),
    sa.Column('tracking_enabled', sa.Boolean(), nullable=False),
    sa.Column('analytics_granularity', sa.String(), nullable=False),
    sa.Column('performance_alerts', sa.Boolean(), nullable=False),
    sa.Column('alert_thresholds', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('ai_creativity_level', sa.Float(), nullable=False),
    sa.Column('ai_response_speed', sa.String(), nullable=False),
    sa.Column('ai_memory_retention', sa.Integer(), nullable=False),
    sa.Column('ai_learning_enabled', sa.Boolean(), nullable=False),
    sa.Column('risk_level', sa.String(), nullable=False),
    sa.Column('compliance_check_level', sa.String(), nullable=False),
    sa.Column('content_backup_enabled', sa.Boolean(), nullable=False),
    sa.Column('emergency_stop_enabled', sa.Boolean(), nullable=False),
    sa.Column('rate_limiting_enabled', sa.Boolean(), nullable=False),
    sa.Column('rate_limits', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_optimized_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('campaign_id')
    )
    op.create_index(op.f('ix_campaign_settings_id'), 'campaign_settings', ['id'], unique=False)
    op.add_column('campaigns', sa.Column('project_token_initial_price', sa.Float(), nullable=True))
    op.add_column('campaigns', sa.Column('project_token_current_price', sa.Float(), nullable=True))
    op.add_column('campaigns', sa.Column('project_market_cap', sa.Float(), nullable=True))
    op.add_column('campaigns', sa.Column('project_circulating_supply', sa.Float(), nullable=True))
    op.add_column('campaigns', sa.Column('token_distribution', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('vesting_schedule', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('token_launch_date', sa.DateTime(), nullable=True))
    op.add_column('campaigns', sa.Column('blockchain_networks', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('smart_contract_features', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('technology_stack', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('github_repository', sa.String(), nullable=True))
    op.add_column('campaigns', sa.Column('audit_reports', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('target_markets', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('competitor_analysis', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('unique_selling_points', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('market_positioning', sa.String(), nullable=True))
    op.add_column('campaigns', sa.Column('community_size', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('growth_rate', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('engagement_rate', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('influencer_partnerships', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('key_messages', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('prohibited_terms', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('tone_guidelines', sa.String(), nullable=True))
    op.add_column('campaigns', sa.Column('campaign_budget', sa.Float(), nullable=True))
    op.add_column('campaigns', sa.Column('campaign_kpis', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('content_guidelines', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('regulatory_restrictions', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('restricted_territories', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('compliance_requirements', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('team_members', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('project_history', sa.String(), nullable=True))
    op.add_column('campaigns', sa.Column('project_roadmap', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('previous_campaigns', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('brand_guidelines', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('campaigns', sa.Column('content_themes', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('approved_hashtags', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('approved_media_assets', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('campaigns', sa.Column('content_calendar', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.alter_column('campaigns', 'project_token_supply',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('campaigns', 'project_token_supply',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('campaigns', 'content_calendar')
    op.drop_column('campaigns', 'approved_media_assets')
    op.drop_column('campaigns', 'approved_hashtags')
    op.drop_column('campaigns', 'content_themes')
    op.drop_column('campaigns', 'brand_guidelines')
    op.drop_column('campaigns', 'previous_campaigns')
    op.drop_column('campaigns', 'project_roadmap')
    op.drop_column('campaigns', 'project_history')
    op.drop_column('campaigns', 'team_members')
    op.drop_column('campaigns', 'compliance_requirements')
    op.drop_column('campaigns', 'restricted_territories')
    op.drop_column('campaigns', 'regulatory_restrictions')
    op.drop_column('campaigns', 'content_guidelines')
    op.drop_column('campaigns', 'campaign_kpis')
    op.drop_column('campaigns', 'campaign_budget')
    op.drop_column('campaigns', 'tone_guidelines')
    op.drop_column('campaigns', 'prohibited_terms')
    op.drop_column('campaigns', 'key_messages')
    op.drop_column('campaigns', 'influencer_partnerships')
    op.drop_column('campaigns', 'engagement_rate')
    op.drop_column('campaigns', 'growth_rate')
    op.drop_column('campaigns', 'community_size')
    op.drop_column('campaigns', 'market_positioning')
    op.drop_column('campaigns', 'unique_selling_points')
    op.drop_column('campaigns', 'competitor_analysis')
    op.drop_column('campaigns', 'target_markets')
    op.drop_column('campaigns', 'audit_reports')
    op.drop_column('campaigns', 'github_repository')
    op.drop_column('campaigns', 'technology_stack')
    op.drop_column('campaigns', 'smart_contract_features')
    op.drop_column('campaigns', 'blockchain_networks')
    op.drop_column('campaigns', 'token_launch_date')
    op.drop_column('campaigns', 'vesting_schedule')
    op.drop_column('campaigns', 'token_distribution')
    op.drop_column('campaigns', 'project_circulating_supply')
    op.drop_column('campaigns', 'project_market_cap')
    op.drop_column('campaigns', 'project_token_current_price')
    op.drop_column('campaigns', 'project_token_initial_price')
    op.drop_index(op.f('ix_campaign_settings_id'), table_name='campaign_settings')
    op.drop_table('campaign_settings')
    # ### end Alembic commands ###
